{"version":3,"sources":["components/Dialogs/Dialogs.module.scss","hoc/withAuthRedirect.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","path","id","className","s","dialog","active","name","Message","message","maxLength10","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogsPage","dialogsElements","dialogs","map","messagesElements","messages","dialogsItems","values","sendMessage","newMessageBody","compose","dispatch","sendMessageCreator"],"mappings":"mHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,qJCG5KC,EAAkB,SAACC,GAAD,MAAY,CAClCC,OAAQD,EAAME,KAAKD,SAGRE,EAAmB,SAACC,GAAe,IACxCC,EADuC,4JAE3C,WACE,OAAKC,KAAKC,MAAMN,OAGT,cAACG,EAAD,eAAeE,KAAKC,QAFlB,cAAC,IAAD,CAAUC,GAAG,eAJmB,GACbC,IAAML,WAStC,OAAOM,YAAQX,EAARW,CAAyBL,K,sFCHnBM,EAZI,SAACJ,GAClB,IAAIK,EAAO,YAAcL,EAAMM,GAE/B,OACE,qBAAKC,UAAS,UAAKC,IAAEC,OAAP,YAAiBD,IAAEE,QAAjC,SACE,cAAC,IAAD,CAAST,GAAII,EAAb,SACGL,EAAMW,UCHAC,EAJC,SAACZ,GACf,OAAO,qBAAKO,UAAWC,IAAEC,OAAlB,SAA2BT,EAAMa,W,0CCuCpCC,EAAcC,YAAiB,IAsB/BC,EAAsBC,YAAU,CACpCC,KAAM,wBADoBD,EApBL,SAACjB,GACtB,OACE,uBAAMmB,SAAUnB,EAAMoB,aAAtB,UACE,8BACE,cAACC,EAAA,EAAD,CACEC,UAAWC,IACXZ,KAAK,iBACLa,YAAY,qBACZC,SAAU,CAACC,IAAUZ,OAGzB,8BACE,kDAYOa,EA5DC,SAAC3B,GACf,IAAIP,EAAQO,EAAM4B,YAEdC,EAAkBpC,EAAMqC,QAAQC,KAClC,SAAAtB,GAAM,OAAI,cAAC,EAAD,CAAYE,KAAMF,EAAOE,KAAsBL,GAAIG,EAAOH,IAAtBG,EAAOH,OAGnD0B,EAAmBvC,EAAMwC,SAASF,KACpC,SAAAlB,GAAO,OAAI,cAAC,EAAD,CAASA,QAASA,EAAQA,SAAcA,EAAQP,OAO7D,OAAKN,EAAMN,OAGT,sBAAKa,UAAWC,IAAEsB,QAAlB,UACE,qBAAKvB,UAAWC,IAAE0B,aAAlB,SACGL,IAEH,qBAAKtB,UAAWC,IAAEK,QAAlB,SACE,8BACGmB,MAGL,cAAChB,EAAD,CACEG,SAjBgB,SAACgB,GACrBnC,EAAMoC,YAAYD,EAAOE,sBAGD,cAAC,IAAD,CAAUpC,GAAG,Y,+BCF1BqC,sBACbnC,aAfsB,SAACV,GACvB,MAAO,CACLmC,YAAanC,EAAMmC,gBAII,SAACW,GAC1B,MAAO,CACLH,YAAa,SAACC,GACZE,EAASC,YAAmBH,SAOhCzC,IAFa0C,CAGbX","file":"static/js/4.a9a429c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1iCLL\",\"dialogsItems\":\"Dialogs_dialogsItems__3hWQV\",\"active\":\"Dialogs_active__1jjWH\",\"messages\":\"Dialogs_messages__2iZHH\",\"message\":\"Dialogs_message__1IT4D\"};","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) {\r\n        return <Redirect to=\"/login\"/>\r\n      }\r\n      return <Component {...this.props} />\r\n    }\r\n  }\r\n\r\n  return connect(mapStateToProps)(RedirectComponent)\r\n}","import s from '../Dialogs.module.scss'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nconst DialogItem = (props) => {\r\n  let path = '/dialogs/' + props.id\r\n\r\n  return (\r\n    <div className={`${s.dialog} ${s.active}`}>\r\n      <NavLink to={path}>\r\n        {props.name}\r\n      </NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DialogItem","import s from '../Dialogs.module.scss'\r\n\r\nconst Message = (props) => {\r\n  return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message","import s from './Dialogs.module.scss'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormControls/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage\r\n\r\n  let dialogsElements = state.dialogs.map(\r\n    dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id}/>\r\n  )\r\n\r\n  let messagesElements = state.messages.map(\r\n    message => <Message message={message.message} key={message.id}/>\r\n  )\r\n\r\n  const addNewMessage = (values) => {\r\n    props.sendMessage(values.newMessageBody)\r\n  }\r\n\r\n  if (!props.isAuth) return <Redirect to='/Login'/>\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>\r\n        {dialogsElements}\r\n      </div>\r\n      <div className={s.message}>\r\n        <div>\r\n          {messagesElements}\r\n        </div>\r\n      </div>\r\n      <AddMessageFormRedux\r\n        onSubmit={addNewMessage}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddMessageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          component={Textarea}\r\n          name=\"newMessageBody\"\r\n          placeholder=\"Enter your message\"\r\n          validate={[required, maxLength10]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>\r\n          send\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({\r\n  form: 'dialogAddMessageForm'\r\n})(AddMessageForm)\r\n\r\nexport default Dialogs","import {sendMessageCreator} from \"../../redux/dialogs-reduser\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(sendMessageCreator(newMessageBody))\r\n    }\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect,\r\n)(Dialogs)"],"sourceRoot":""}